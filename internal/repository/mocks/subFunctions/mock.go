// Code generated by MockGen. DO NOT EDIT.
// Source: subFunctions.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockFinanceSubFunctions is a mock of FinanceSubFunctions interface.
type MockFinanceSubFunctions struct {
	ctrl     *gomock.Controller
	recorder *MockFinanceSubFunctionsMockRecorder
}

// MockFinanceSubFunctionsMockRecorder is the mock recorder for MockFinanceSubFunctions.
type MockFinanceSubFunctionsMockRecorder struct {
	mock *MockFinanceSubFunctions
}

// NewMockFinanceSubFunctions creates a new mock instance.
func NewMockFinanceSubFunctions(ctrl *gomock.Controller) *MockFinanceSubFunctions {
	mock := &MockFinanceSubFunctions{ctrl: ctrl}
	mock.recorder = &MockFinanceSubFunctionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFinanceSubFunctions) EXPECT() *MockFinanceSubFunctionsMockRecorder {
	return m.recorder
}

// CreateNewTransaction mocks base method.
func (m *MockFinanceSubFunctions) CreateNewTransaction(ctx context.Context, idFrom uuid.UUID, operation string, sum float64, idTo uuid.UUID, description string, idempotencyKey uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewTransaction", ctx, idFrom, operation, sum, idTo, description, idempotencyKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNewTransaction indicates an expected call of CreateNewTransaction.
func (mr *MockFinanceSubFunctionsMockRecorder) CreateNewTransaction(ctx, idFrom, operation, sum, idTo, description, idempotencyKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewTransaction", reflect.TypeOf((*MockFinanceSubFunctions)(nil).CreateNewTransaction), ctx, idFrom, operation, sum, idTo, description, idempotencyKey)
}

// CreateNewUser mocks base method.
func (m *MockFinanceSubFunctions) CreateNewUser(ctx context.Context, id uuid.UUID, sum float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewUser", ctx, id, sum)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNewUser indicates an expected call of CreateNewUser.
func (mr *MockFinanceSubFunctionsMockRecorder) CreateNewUser(ctx, id, sum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewUser", reflect.TypeOf((*MockFinanceSubFunctions)(nil).CreateNewUser), ctx, id, sum)
}
